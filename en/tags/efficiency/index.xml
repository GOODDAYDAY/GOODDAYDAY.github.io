<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Efficiency on GoodyHao's Blog</title><link>https://gooddayday.github.io/en/tags/efficiency/</link><description>Recent content in Efficiency on GoodyHao's Blog</description><generator>Hugo</generator><language>en</language><managingEditor>865700600@qq.com (GoodyHao)</managingEditor><webMaster>865700600@qq.com (GoodyHao)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 02 Oct 2025 13:51:49 +0800</lastBuildDate><atom:link href="https://gooddayday.github.io/en/tags/efficiency/index.xml" rel="self" type="application/rss+xml"/><item><title>[Spring] 2. Analysis of Custom Thread Pools and Thread Reuse in Spring Async Interfaces</title><link>https://gooddayday.github.io/en/2025/10/14.-spring-async-threadpool-and-thread-reuse/</link><pubDate>Thu, 02 Oct 2025 10:23:17 +0800</pubDate><author>865700600@qq.com (GoodyHao)</author><guid>https://gooddayday.github.io/en/2025/10/14.-spring-async-threadpool-and-thread-reuse/</guid><description>&lt;h1 id="spring-2-analysis-of-custom-thread-pools-and-thread-reuse-in-spring-async-interfaces"&gt;[Spring] 2. Analysis of Custom Thread Pools and Thread Reuse in Spring Async Interfaces&lt;/h1&gt;
&lt;h2 id="preface"&gt;Preface&lt;/h2&gt;
&lt;p&gt;When handling high-concurrency scenarios in Spring applications, proper use of asynchronous programming and thread pool management is crucial. This article provides an in-depth analysis of Spring&amp;rsquo;s default thread pool, custom thread pools, and thread reuse mechanisms through practical code examples.&lt;/p&gt;
&lt;h2 id="why-use-custom-thread-pools"&gt;Why Use Custom Thread Pools?&lt;/h2&gt;
&lt;p&gt;When a Spring Boot application starts, it automatically configures a global task executor (TaskExecutor) with the default name &lt;code&gt;applicationTaskExecutor&lt;/code&gt;. However, &lt;strong&gt;using Spring&amp;rsquo;s default thread pool directly in production environments is not recommended&lt;/strong&gt; for the following reasons:&lt;/p&gt;</description></item><item><title>[Github] 4. Value-Checker-Java: Customizable AOP Validation Framework</title><link>https://gooddayday.github.io/en/2025/09/11.-value-checker/</link><pubDate>Fri, 26 Sep 2025 23:27:17 +0800</pubDate><author>865700600@qq.com (GoodyHao)</author><guid>https://gooddayday.github.io/en/2025/09/11.-value-checker/</guid><description>&lt;h1 id="github-4-value-checker-java-customizable-aop-validation-framework"&gt;[Github] 4. Value-Checker-Java: Customizable AOP Validation Framework&lt;/h1&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Value-Checker-Java is essentially a &lt;strong&gt;customizable AOP pointcut framework&lt;/strong&gt;. It allows developers to insert custom validation logic before method execution, and this validation logic can be arbitrarily complex business rules.&lt;/p&gt;
&lt;p&gt;However, if it merely provides an AOP pointcut, that wouldn&amp;rsquo;t be very meaningful. &lt;strong&gt;The core value of Value-Checker-Java lies in its thread-safe context management mechanism&lt;/strong&gt;. Without this context management, data queried in the first validator cannot be used in subsequent validators, forcing each validator to re-query data, which defeats the purpose of validation chains.&lt;/p&gt;</description></item><item><title>[Github] 3. Basic-Check: Validation Framework</title><link>https://gooddayday.github.io/en/2025/09/10.-basic-check/</link><pubDate>Fri, 26 Sep 2025 22:27:17 +0800</pubDate><author>865700600@qq.com (GoodyHao)</author><guid>https://gooddayday.github.io/en/2025/09/10.-basic-check/</guid><description>&lt;h1 id="github-3-basic-check-validation-framework"&gt;[Github] 3. Basic-Check: Validation Framework&lt;/h1&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Parameter validation is a common and crucial requirement in daily Java development. Traditional parameter validation typically requires writing extensive if-else conditional code in each method, which is not only redundant and tedious but also prone to omissions. Basic-Check-Java was born to solve this pain point as a lightweight parameter validation framework.&lt;/p&gt;
&lt;p&gt;This article will provide an in-depth introduction to Basic-Check-Java&amp;rsquo;s design philosophy, core features, and practical applications, helping developers quickly master this practical tool.&lt;/p&gt;</description></item></channel></rss>