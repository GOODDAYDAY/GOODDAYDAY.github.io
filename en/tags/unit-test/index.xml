<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unit Test on GoodyHao's Blog</title><link>https://gooddayday.github.io/en/tags/unit-test/</link><description>Recent content in Unit Test on GoodyHao's Blog</description><generator>Hugo</generator><language>en</language><managingEditor>865700600@qq.com (GoodyHao)</managingEditor><webMaster>865700600@qq.com (GoodyHao)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 02 Oct 2025 13:51:49 +0800</lastBuildDate><atom:link href="https://gooddayday.github.io/en/tags/unit-test/index.xml" rel="self" type="application/rss+xml"/><item><title>[Java] 2. Unit Test Basic Usage</title><link>https://gooddayday.github.io/en/2025/09/6.-unit-test/</link><pubDate>Sun, 21 Sep 2025 23:36:17 +0800</pubDate><author>865700600@qq.com (GoodyHao)</author><guid>https://gooddayday.github.io/en/2025/09/6.-unit-test/</guid><description>&lt;h1 id="java-2-unit-test-basic-usage"&gt;[Java] 2. Unit Test Basic Usage&lt;/h1&gt;
&lt;h2 id="mockito-basic-usage"&gt;Mockito Basic Usage&lt;/h2&gt;
&lt;p&gt;In unit testing, many tests (except Util classes) need to mock some services to ensure only the current logic being tested is actually tested.&lt;/p&gt;
&lt;p&gt;Specifically, you need to first mock an object, then mock the methods of this object, and then you can use the mocked methods to test the logic you want to test.&lt;/p&gt;
&lt;h3 id="mock-objects"&gt;Mock Objects&lt;/h3&gt;
&lt;p&gt;First, you need to declare the interfaces/implementation classes that need to be mocked in the Test class. For example:&lt;/p&gt;</description></item></channel></rss>